// Copyright © Viron Software ⨈
syntax = "proto3";
package recrypt.types;
import "google/protobuf/timestamp.proto";

// The enum Currency and enum Market aren't used directly
// since they are 64-bit keys in the backend and protobuf enums are 32-bit.
// This is documented accordingly next to the field when values within those enums can be specified.

// Use the enum list here for integers that refer to the enum name as a comment.
// currency_seq int64 values
enum Currency {
  CURRENCY_UNSPECIFIED = 0;
  CURRENCY_AUSTRALIAN_DOLLAR = 1;
  CURRENCY_BITCOIN = 2;
  CURRENCY_ETHEREUM = 3;
}
// market_seq int64 values
enum Market {
  MARKET_UNSPECIFIED = 0;
  MARKET_BTC_AUD = 1;
  MARKET_ETH_AUD = 2;
}
// int32 values
enum OrderSide {
  BUY = 0;
  SELL = 1;
}
// int32 values
enum OrderType {
  LIMIT = 0;
  MARKET = 1;
}
// int32 values
enum OrderTimeInForce {
  GOOD_TIL_CANCELLED = 0;
  IMMEDIATE_OR_CANCEL = 1;
  FILL_OR_KILL = 2;
}
// int32 values
enum OrderStatus {
  FILLED = 0;
  PARTIALLY_FILLED = 1;
  PENDING = 2;
  REJECTED = 3;
}

message SystemFeedRequest {
  int64 session_seq = 1;
  bool request_global_currency_data = 2;
}

message SystemFeedSubscribeRequest {
  int64 session_seq = 1;
  repeated int64 market_seqs = 2; // enum Markets. Maximum three markets. If require more create more API keys.
  bool anonymous = 3; // Unless you're trying to reverse engineer how the frontend works set this as false always.
}

message SystemFeedSubscribeResponse {
  repeated int64 subscribed_market_seqs = 1; // enum Markets. List of markets subscribed to.
  repeated int64 unsubscribed_market_seqs = 2; // enum Markets. List of markets that was just unsubscribed from.
}

// --- BEGIN SYSTEM FEED MESSAGE TYPES
message FeedNotification {
  int64 dedupe_seq = 1;
  string title = 2;
  string message = 3;
}

message FeedNotice {
  // Displayed on the front-end.
  string notice_manual = 1;
  string notice_auto = 2;
}

message GlobalCurrencyData {
  repeated GlobalCurrencyDataEntry data = 1;
}

message GlobalCurrencyDataEntry {
  int64 seq = 1; // enum Currency
  string short_name = 2;
  string full_name = 3;
  int32 friendly_decimal_places = 4;
  int32 all_decimal_places = 5;
  int32 required_confirmations = 6;
  string icon = 7; // SVG
  repeated int32 network_identifiers = 8;
}

message DepositDeleted {
  string tx_id = 1;
}

// MarketState is pushed through during:
// 1. New SystemFeed connection, and associated API key was already was subscribed to certain markets.
// 2. SystemFeedSubscribe was just called on the same API key.
// 3. Database failover occurred and new whole state needed to be pushed.
// In the event this message comes through, make sure to clear out existing in-memory order book data.
message MarketState {
  int64 market_seq = 1;
  repeated MarketOrderBookAdded order_book = 2; // ALL buy/sell orders
  repeated MarketMatch recent_matches = 3; // Most recent 50 settled trades.
  repeated MarketPrice price = 4; // The latest price as part of this state.
}

message MarketOrderBookAdded {
  int64 market_seq = 1;
  int64 order_book_seq = 2;
  string price = 3; // Decimal
  string quantity = 4; // Decimal
  OrderSide side = 5;
}

// Occurs when an order gets partially fulfilled.
message MarketOrderBookAdjusted {
  int64 market_seq = 1;
  int64 order_book_seq = 2;
  string quantity = 3; // Decimal
}

message MarketOrderBookRemoved {
  int64 market_seq = 1;
  int64 order_book_seq = 2;
}

message MarketMatch {
  int64 market_seq = 1;
  int64 match_seq = 2;
  string price = 3; // Decimal
  string quantity = 4; // Decimal
  OrderSide side = 5;
  google.protobuf.Timestamp tstamp = 6;
}

message MarketPrice {
  int64 market_seq = 1;
  string price = 2; // Decimal
  int64 epoch_second = 3;
}

message AnonFeedSessionInfo {
  int64 anon_seq = 1;
  string anon_key = 2;
}

message SystemFeedData {
  oneof message {
    google.protobuf.Timestamp ping = 1;
    FeedNotification feed_notification = 2;
    FeedNotice feed_notice = 3;
    GlobalCurrencyData global_currency_data = 4;
    GetDepositsReceivedEntry deposit_received = 5;
    DepositDeleted deposit_deleted = 6;

    MarketState market_state = 7; // Refer to comment above MarketState type.
    MarketOrderBookAdded market_order_book_added = 8; // Send for every order added for all subscribed markets.
    MarketOrderBookAdjusted market_order_book_adjusted = 9; // Send for every order added for all subscribed markets.
    MarketOrderBookRemoved market_order_book_removed = 10; // Sent for every order removed for all subscribed markets.
    MarketMatch market_match = 11; // Sent every match for all subscribed markets.
    MarketPrice market_price = 12; // Sent every price change for all subscribed markets. There can me multiple prices per epoch second.

    AnonFeedSessionInfo anon_feed_session_info = 13; // This is only returned for anonymous system feed connections.
  }
}
// END SYSTEM FEED MESSAGE TYPES ---

message ValidateAddressRequest {
  int64 session_seq = 1;
  int64 currency_seq = 2; // enum Currency
  int32 network_identifier = 3;
  string address = 4; // Minimum 8 characters, maximum 128 characters.
}

message ValidateAddressResponse {
  string balance = 1; // Will be "" if not applicable.
}

message AllocateDepositAddressRequest {
  int64 session_seq = 1;
  int64 currency_seq = 2; // enum Currency
}

message AllocateDepositAddressResponse {
}

message GetDepositAddressesRequest {
  int64 session_seq = 1;
  int64 currency_seq = 2; // enum Currency
}

message GetDepositAddressesResponse {
  repeated string addresses = 1;
  string min_deposit = 2; // Decimal
}

message GetDepositsReceivedRequest {
  int64 session_seq = 1;
  google.protobuf.Timestamp start_tstamp = 2; // PAGING SUPPORT: Can be null. If provided 'end_tstamp' must also be provided.
  google.protobuf.Timestamp end_tstamp = 3; // PAGING SUPPORT: Can be null. Both null if showing latest data, otherwise showing rows before 'end_tstamp'.
}

message GetDepositsReceivedResponse {
  // Maximum 100 rows returned. Take last entry tstamp and specify it as end_tstamp to continue if rows returned was not zero.
  repeated GetDepositsReceivedEntry deposits = 1;
  int32 total_rows = 2; // Can be greater than 100. Represents all row count given current filters/paging.
}

message GetDepositsReceivedEntry {
  int64 currency_seq = 1; // enum Currency
  string value = 2; // Decimal
  // td_id has the following format for each currency:
  // BTC/LTC/BCH/DOGE: [block-hash]-[transaction hash]-[output index]
  // ETH: [block-hash]-[transaction hash]
  // ADA: [block-number]-[transaction hash]-[output index]
  string tx_id = 3;
  bool pending = 4;
  bool blocked = 5;
  int32 confirmations = 6;
  google.protobuf.Timestamp tstamp = 7;
  bool is_new = 8; // Only used for live updates when returned from system feed.
}

message GetBalancesRequest {
  int64 session_seq = 1;
  bool exclude_order_book = 2;
}

message GetBalancesResponse {
  repeated GetBalancesEntry balances = 1;
  google.protobuf.Timestamp tstamp = 2; // Evaluated 'as at' timestamp.
}

message GetBalancesEntry {
  int64 currency_seq = 1; // enum Currency
  string balance = 2; // Decimal
}

message MaintenanceCheckRequest {
}

message MaintenanceCheckResponse {
  // Please read readme.md: Section 'Retry on failure'.
  // Most downtime only lasts 1 minute within a 30 minute timespan from event_tstamp.
  bool upcoming_event = 1; // TRUE if any maintenance that'll result in downtime is upcoming.
  bool ongoing_event = 2; // TRUE if an ongoing scheduled or unscheduled event is active.
  google.protobuf.Timestamp event_tstamp = 3; // When upcoming_event or ongoing_event is true this will be set.
}

message GetTransactionsRequest {
  int64 session_seq = 1;
  repeated int64 currency_seqs = 2; // enum Currency. Optional extra filter. Empty means all currencies.
  google.protobuf.Timestamp start_tstamp = 3; // PAGING SUPPORT: Can be null. If provided 'end_tstamp' must also be provided.
  google.protobuf.Timestamp end_tstamp = 4; // PAGING SUPPORT: Can be null. Both null if showing latest data, otherwise showing rows before 'end_tstamp'.
}

message GetTransactionsResponse {
  // Maximum 100 rows returned. Take last entry tstamp and specify it as end_tstamp to continue if rows returned was not zero.
  repeated GetTransactionsEntry transactions = 1;
  int32 total_rows = 2; // Can be greater than 100. Represents all row count given current filters/paging.
  google.protobuf.Timestamp tstamp = 3; // Evaluated 'as at' timestamp.
}

message GetTransactionsEntry {
  int64 seq = 1;
  int64 currency_seq = 2; // enum Currency
  int32 type = 3;
  string balance_change = 4; // Decimal
  string system_note = 5;
  google.protobuf.Timestamp tstamp = 6;
}

message GetMarketsRequest {
}

message GetMarketsResponse {
  repeated GetMarketsEntry markets = 1;
}

message GetMarketsEntry {
  int64 seq = 1; // enum Market
  int64 base_currency_seq = 2; // enum Currency
  int64 quote_currency_seq = 3; // enum Currency
  string maker_fee_percent = 4; // Decimal
  string taker_fee_percent = 5; // Decimal
  repeated string depth_aggs = 6; // Decimal
}

message OrderRequest {
  int64 session_seq = 1;
  int64 market_seq = 2; // enum Market
  OrderSide side = 3;
  OrderType type = 4;
  optional OrderTimeInForce time_in_force = 5;
  optional string quantity = 6; // Decimal
  optional string price = 7; // Decimal
  optional string quote_order_quantity = 8; // Decimal
}

message OrderFill {
  string price = 1; // Decimal
  string quantity = 2; // Decimal
  string commission = 3; // Decimal
  int64 commission_currency_seq = 4; // enum Currency
  int64 trade_id = 5;
}

message OrderResponse {
  OrderStatus status = 1;
  repeated OrderFill fills = 2;
  optional int64 order_id = 3; // Only provided for limit orders that did not get fully filled.
  optional int64 transaction_id = 4; // Only provided for market orders.
}

message CancelOrderRequest {
  int64 session_seq = 1;
  int64 market_seq = 2; // enum Market
  int64 order_book_seq = 3;
}

message CancelOrderResponse {
}

message ListOrdersRequest {
  int64 session_seq = 1;
  int64 market_seq = 2; // enum Market
}

message ListOrdersResponse {
  repeated ListOrdersEntry orders = 1;
}

message ListOrdersEntry {
  int64 order_book_seq = 1;
  // TODO - more detail here...
}