// Copyright © Viron Software ⨈
syntax = "proto3";
package recrypt.types;

message SessionStateRequest {
  // Blank request, cookie data will be included by default for browser web requests at metadata.
  // Cookie name: sessionkey
}

message SessionStateResponse {
  int64 seq = 1; // Seq = 0 means failure. All other defaults will be default initialized.
  string email = 2;
  string name = 3;
  string last_name = 4;
  int32 type = 5; /* 0 = personal/end-user account, 1 = business/corporate account */
}

message LoginRequest {
  string email = 1; // Must be valid email. Min 3 characters. Max 254 characters.
  string password = 2; // Min 8 characters. Max 64 characters.
  string totp = 3; // 6 characters only (numbers)
}

message LoginResponse {
  // If 1 then there will be Set-Cookie in the header/metadata with the sessionkey.
  // If 2 then totp is required.
  // If 0 then failure.
  int32 result = 1;
}

message LogoutRequest {
  // If the "sessionkey" cookie is provided with this request, it will be cleared from the listed of sessions for this user.
}

message LogoutResponse {
  // Specifically the cookie sessionkey will be told to expire on the response if success is true.
  // This response will always clear session_key cookies from the browser.
  bool success = 1;
}

message ConsumeTokenRequest {
  int64 seq = 1; // Must be zero or higher.
  string token = 2; // Must be a 64-character hexadecimal string.
  oneof op {
    string password = 3; // Min 8 characters. Max 64 characters. Requires zxcvbn score of atleast 3.
  }
}

message ConsumeTokenResponse {
  // If 0 then invalid token.
  // If 1 then success.
  // If 2 then token iS OK but try again with password provided (verify email/password reset).
  int32 state = 1;
}

message SetGuardKeyCookieRequest {
  string value = 1;
}

message SetGuardKeyCookieResponse {
}

message ConfigureAuthorizationAuthenticateRequest {
}

message ConfigureAuthorizationAuthenticateResponse {
  bool password = 1;
  bool email = 2;
  bool totp = 3;
}

message ConfigureAuthorizationAuthenticateValidateRequest {
  string password = 1;
  string emailCode = 2;
  string totpCode = 3;
}

message ConfigureAuthorizationAuthenticateValidateResponse {
  string authorizationCode = 1;
}

message ConfigureAuthorizationRequest {
  string authorizationCode = 1;
  oneof action {
    bool authorizationLoginPassword = 4; // This will always be set as true by the backend.
    bool authorizationLoginEmail = 5;
    bool authorizationLoginTotp = 6;
    bool authorizationMarketOrderPassword = 7;
    bool authorizationMarketOrderEmail = 8;
    bool authorizationMarketOrderTotp = 9;
    bool authorizationWithdrawalPassword = 10;
    bool authorizationWithdrawalEmail = 11; // This will always be set as true by the backend.
    bool authorizationWithdrawalTotp = 12;
  }
}

message ConfigureAuthorizationResponse {
}