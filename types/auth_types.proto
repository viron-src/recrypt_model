// Copyright © Viron Software ⨈
syntax = "proto3";
package recrypt.types;
import "google/protobuf/timestamp.proto";

message SessionStateRequest {
  // Cookie data will be included by default for browser web requests at metadata.
  // Cookie/metadata name: sessionkey
  int64 session_seq = 1;
}

message SessionStateResponse {
  int64 session_seq = 1; // Seq = 0 means failure. All other defaults will be default initialized.
  string email = 2;
  string name = 3;
  string last_name = 4;
  int32 type = 5; /* 0 = personal/end-user account, 1 = business/corporate account */
}

message LoginRequest {
  string email = 1; // Must be valid email. Min 3 characters. Max 254 characters.
  string password = 2; // Min 8 characters. Max 72 characters.
  string email_code = 3; // 8 characters only (numbers)
  string totp_code = 4; // 8 characters only (numbers)
  string recaptcha_token = 5; /* I wouldn't advise trying to automate login of accounts. This is provided by the recaptcha frontend.*/
}

message LoginResponse {
  // If 1 then there will be Set-Cookie in the header/metadata with the sessionkey.
  // If 2 then totp is required.
  // If 3 then email is required.
  // If 4 then email + totp is required.
  // If 0 then failure.
  // If -1 then account locked.
  // If -2 then account banned.
  int32 result = 1;
  int64 session_seq = 2; // This will be positive non-zero when result is 1.
  google.protobuf.Timestamp email_code_sent_time = 3;
}

message LogoutRequest {
  // sessionkey must be provided with this request, it will be cleared from the list of active sessions for this user.
  int64 session_seq = 1;
}

message LogoutResponse {
  // Specifically the cookie sessionkey will be told to expire on the response if success is true.
  // This response will always clear session_key cookies from the browser.
  bool success = 1;
}

message ConsumeTokenRequest {
  int64 token_seq = 1; // Must be zero or higher.
  string token_key = 2; // Must be a 64-character hexadecimal string.
  oneof op {
    string password = 3; // Min 8 characters. Max 64 characters. Requires zxcvbn score of atleast 3.
  }
}

message ConsumeTokenResponse {
  // If 0 then invalid token.
  // If 1 then success.
  // If 2 then token iS OK but try again with password provided (verify email/password reset).
  int32 state = 1;
  string affected = 2; // Only populated if state is 2 (email), else empty.
}

message SetGuardKeyCookieRequest {
  string value = 1;
}

message SetGuardKeyCookieResponse {
}

message ConfigureAuthorizationAuthenticateRequest {
  int64 session_seq = 1;
}

message ConfigureAuthorizationAuthenticateResponse {
  int64 auth_seq = 1;
  bool password = 2;
  bool email = 3;
  bool totp = 4;
}

message ConfigureAuthorizationAuthenticateValidateRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string recaptcha_token = 3;
  string password = 4;
  string email_code = 5;
  string totp_code = 6;
}

message ConfigureAuthorizationAuthenticateValidateResponse {
  // Set-Cookie in the header/metadata with the authkey if success.
}

message ConfigureAuthorizationRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  oneof action {
    bool authorization_login_password = 3; // This will always be set as true by the backend.
    bool authorization_login_email = 4;
    bool authorization_login_totp = 5;
    bool authorization_market_order_password = 6;
    bool authorization_market_order_email = 7;
    bool authorization_market_order_totp = 8;
    bool authorization_withdrawal_password = 9;
    bool authorization_withdrawal_email = 10; // This will always be set as true by the backend.
    bool authorization_withdrawal_totp = 11;
  }
}

message ConfigureAuthorizationResponse {
}

message GetAuthorizationConfigurationRequest {
  int64 session_seq = 1;
}

message GetAuthorizationConfigurationResponse {
  bool authorization_login_password = 1;
  bool authorization_login_email = 2;
  bool authorization_login_totp = 3;
  bool authorization_market_order_password = 4;
  bool authorization_market_order_email = 5;
  bool authorization_market_order_totp = 6;
  bool authorization_withdrawal_password = 7;
  bool authorization_withdrawal_email = 8;
  bool authorization_withdrawal_totp = 9;
  bool is_totp_enabled = 10;
  string anti_phishing_code = 11;
  string grant_ready = 12;
  bool granted = 13;
}

message AcquireGrantRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
}

message AcquireGrantResponse {
}

message ChangePasswordRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string current_password = 3; // Min 8 characters. Max 72 characters.
  string new_password = 4; // Min 8 characters. Max 72 characters.
  bool revoke_api_keys = 5;
}

message ChangePasswordResponse {
}

message EnableTotpRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
}

message EnableTotpResponse {
  bytes secret = 1;
}

message EnableTotpConfirmRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string totp_code = 3;
  bool revoke_api_keys = 4;
}

message EnableTotpConfirmResponse {
  bytes recovery_code = 1;
}

message ResetTotpRequest {
  string email = 1;
  string password = 2;
  bytes recovery_code = 3;
  string recaptcha_token = 4;
}

message ResetTotpResponse {
  int64 req_seq = 1;
  bytes secret = 2;
}

message ResetTotpConfirmRequest {
  int64 req_seq = 1;
  string email = 2;
  string password = 3;
  bytes recovery_code = 4;
  string totp_code = 5;
  bool revoke_api_keys = 6;
}

message ResetTotpConfirmResponse {
  bytes recovery_code = 1;
}

message DisableTotpRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  bool revoke_api_keys = 3;
}

message DisableTotpResponse {
}

message ChangeEmailRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string new_email = 3;
  string current_password = 4;
}

message ChangeEmailResponse {
}

message ChangeEmailConfirmRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string email_code = 3;
  string current_password = 4;
  bool revoke_api_keys = 5;
}

message ChangeEmailConfirmResponse {
  string normalized_email = 1;
}

message ChangeAntiPhishingCodeRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string code = 3;
}

message ChangeAntiPhishingCodeResponse {
}

message RegisterDeviceNotificationsRequest {
  int64 session_seq = 1;
  string device_type = 2;
  string device_token = 3;
}

message RegisterDeviceNotificationsResponse {
  bool replaced = 1;
}

message LockAccountRequest {
  string email = 1;
  string password = 2; // Min 8 characters. Max 72 characters.
  bool trial_run = 3;
  string recaptcha_token = 4;
}

message LockAccountResponse {
  string curr_email = 1;
  string old_email = 2;
  google.protobuf.Timestamp email_changed_tstamp = 3;
  google.protobuf.Timestamp password_changed_tstamp = 4;
  google.protobuf.Timestamp creation_tstamp = 5;
}

message GetSessionsRequest {
  int64 session_seq = 1;
}

message GetSessionsResponse {
  repeated GetSessionsEntry sessions = 1;
}

message GetSessionsEntry {
  int64 seq = 1;
  string agent = 2;
  uint32 ip_address1 = 3;
  uint32 ip_address2 = 4;
  uint32 ip_address3 = 5;
  uint32 ip_address4 = 6;
  string location = 7;
  bool is_mobile = 8;
  google.protobuf.Timestamp creation_tstamp = 9;
  google.protobuf.Timestamp expiration_tstamp = 10;
}

message RevokeSessionRequest {
  int64 session_seq = 1;
  int64 revoke_session_seq = 2;
}

message RevokeSessionResponse {
}

message GetApiKeysRequest {
  int64 session_seq = 1;
}

message GetApiKeysResponse {
  repeated GetApiKeysEntry keys = 1;
  string anti_phishing_code = 2;
}

message GetApiKeysEntry {
  int64 seq = 1;
  bool writable = 2;
  uint32 ip_address1 = 3;
  uint32 ip_address2 = 4;
  uint32 ip_address3 = 5;
  uint32 ip_address4 = 6;
  google.protobuf.Timestamp creation_tstamp = 7;
}

message ConfigureApiKeysAuthenticateRequest {
  int64 session_seq = 1;
}

message ConfigureApiKeysAuthenticateResponse {
  int64 auth_seq = 1;
  bool password = 2;
  bool email = 3;
  bool totp = 4;
}

message ConfigureApiKeysAuthenticateValidateRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string recaptcha_token = 3;
  string password = 4;
  string email_code = 5;
  string totp_code = 6;
}

message ConfigureApiKeysAuthenticateValidateResponse {
  // Set-Cookie in the header/metadata with the authkey if success.
}

message GenerateApiKeyRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  bool writable = 3;
  string ip_address = 4;
}

message GenerateApiKeyResponse {
  string api_key_contents = 1;
}

message EnableApiKeyRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string api_key_contents = 3;
}

message EnableApiKeyResponse {
}

message DeleteApiKeyRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  int64 api_key_seq = 3;
}

message DeleteApiKeyResponse {
}