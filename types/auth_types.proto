// Copyright © Viron Software ⨈
syntax = "proto3";
package recrypt.types;

message SessionStateRequest {
  // Cookie data will be included by default for browser web requests at metadata.
  // Cookie/metadata name: sessionkey
  int64 session_seq = 1;
}

message SessionStateResponse {
  int64 session_seq = 1; // Seq = 0 means failure. All other defaults will be default initialized.
  string email = 2;
  string name = 3;
  string last_name = 4;
  int32 type = 5; /* 0 = personal/end-user account, 1 = business/corporate account */
}

message LoginRequest {
  string email = 1; // Must be valid email. Min 3 characters. Max 254 characters.
  string password = 2; // Min 8 characters. Max 72 characters.
  string totp = 3; // 8 characters only (numbers)
  string recaptcha_token = 4; /* I wouldn't advise trying to automate login of accounts. This is provided by the recaptcha frontend.*/
}

message LoginResponse {
  // If 1 then there will be Set-Cookie in the header/metadata with the sessionkey.
  // If 2 then totp is required.
  // If 0 then failure.
  int32 result = 1;
  int64 session_seq = 2; // This will be positive non-zero when result is 1.
}

message LogoutRequest {
  // sessionkey must be provided with this request, it will be cleared from the list of active sessions for this user.
  int64 session_seq = 1;
}

message LogoutResponse {
  // Specifically the cookie sessionkey will be told to expire on the response if success is true.
  // This response will always clear session_key cookies from the browser.
  bool success = 1;
}

message ConsumeTokenRequest {
  int64 token_seq = 1; // Must be zero or higher.
  string token_key = 2; // Must be a 64-character hexadecimal string.
  oneof op {
    string password = 3; // Min 8 characters. Max 64 characters. Requires zxcvbn score of atleast 3.
  }
}

message ConsumeTokenResponse {
  // If 0 then invalid token.
  // If 1 then success.
  // If 2 then token iS OK but try again with password provided (verify email/password reset).
  int32 state = 1;
  string affected = 2; // Only populated if state is 2 (email), else empty.
}

message SetGuardKeyCookieRequest {
  string value = 1;
}

message SetGuardKeyCookieResponse {
}

message ConfigureAuthorizationAuthenticateRequest {
  int64 session_seq = 1;
}

message ConfigureAuthorizationAuthenticateResponse {
  int64 request_seq = 1;
  bool password = 2;
  bool email = 3;
  bool totp = 4;
}

message ConfigureAuthorizationAuthenticateValidateRequest {
  int64 session_seq = 1;
  int64 request_seq = 2;
  string recaptcha_token = 3;
  string password = 4;
  string email_code = 5;
  string totp_code = 6;
}

message ConfigureAuthorizationAuthenticateValidateResponse {
  // Set-Cookie in the header/metadata with the authkey if success.
}

message ConfigureAuthorizationRequest {
  int64 session_seq = 1;
  int64 request_seq = 2;
  oneof action {
    bool authorization_login_password = 3; // This will always be set as true by the backend.
    bool authorization_login_email = 4;
    bool authorization_login_totp = 5;
    bool authorization_market_order_password = 6;
    bool authorization_market_order_email = 7;
    bool authorization_market_order_totp = 8;
    bool authorization_withdrawal_password = 9;
    bool authorization_withdrawal_email = 10; // This will always be set as true by the backend.
    bool authorization_withdrawal_totp = 11;
  }
}

message ConfigureAuthorizationResponse {
}

message GetAuthorizationConfigurationRequest {
  int64 session_seq = 1;
}

message GetAuthorizationConfigurationResponse {
  bool authorization_login_password = 1;
  bool authorization_login_email = 2;
  bool authorization_login_totp = 3;
  bool authorization_market_order_password = 4;
  bool authorization_market_order_email = 5;
  bool authorization_market_order_totp = 6;
  bool authorization_withdrawal_password = 7;
  bool authorization_withdrawal_email = 8;
  bool authorization_withdrawal_totp = 9;
  bool is_totp_enabled = 10;
}

message ChangePasswordRequest {
  int64 session_seq = 1;
  int64 request_seq = 2;
  string current_password = 3; // Min 8 characters. Max 72 characters.
  string new_password = 4; // Min 8 characters. Max 72 characters.
}

message ChangePasswordResponse {
}

message EnableTotpRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
}

message EnableTotpResponse {
  bytes secret = 1;
}

message EnableTotpConfirmRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
  string totp_code = 3;
}

message EnableTotpConfirmResponse {
  bytes recovery_code = 1;
}

message DisableTotpRequest {
  int64 session_seq = 1;
  int64 auth_seq = 2;
}

message DisableTotpResponse {
}